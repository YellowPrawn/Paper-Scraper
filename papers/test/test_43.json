{"classification":"topic 5","question":"\n Theo entered a maze (labyrinth) and tries to get to the centre.  As soon as he arrived at \nthe\tfirst\tpossibility\tto\tturn\tright\tor\tleft,\the\tstarted\trecording\teach\tmove\ton\this\tphone\tso\tthat\t\nhe\tcould\tfind\this\tway\tback\tto\tthe\tstart.\t\tHe\tentered\tthe\tmoves\tas\tthe\tdirection\the\tturned\t\nfollowed by the number of steps taken before the next turn.  For example:\n R3 ,  L5 ,  L10 ,  R6 ,  ... ,  L4\n which indicates \"TURN right, STEP 3\", and then \"TURN left, STEP 5\" etc.\n An app on his phone stored the moves in a stack named STK, using 0 for “right” and 1 for “left”.\n The above moves were therefore stored as\n0 ,  3 ,  1 ,  5 ,  1 ,  10 ,  0 ,  6 , ... ,  1 ,  4.\n (a)     Explain why a stack is a suitable structure to hold the data. [2]\n Theo was successful in reaching the centre of the maze and now has to get back to the start.\n (b)     Construct an algorithm, using appropriate stack access methods, to output the moves \nneeded\tto\treturn\tfrom\tthe\tcentre\tto\tthe\tfirst\tpoint\twhere\tTheo\tstarted\trecording\this\t\nmoves.  You can assume that he is facing the correct exit when he starts his return \njourney.                                    [5] \n Another app on the phone gives Theo a visual representation of his path through a maze as \na map.  This app makes use of a procedure MOVE(), which outputs the coordinates of Theo’s \npath\tthrough\ta\tmaze,\tin\treference\tto\tthe\tpoint\tS,\twhere\the\tfirst\tturned\tright\tor\tleft\tand\twhich\t\nhas coordinates (0, 0).\n The diagram shows, for a new maze, the map from point S given the following moves:\n R10 ,  L5 , ...\n(10, 5)\n(10, 0)\nFirst turning point S (0, 0)\nEnter maze\n The third move is R8.\n (c)     State the coordinates on the map after this third move. [1]\n(This question continues on the following page)\nM15/4/COMSC/HP1/ENG/TZ0/XX\n\n– 10 –\n(Question 13 continued)\n At each point, the direction in which Theo is facing is given by the variables N and E. \n\t   Note\tthat\tbefore\tthe\tvery\tfirst\tturn\tis\tmade,\tN = 1 and E = 0.\nN = 1, E = 0\nN = –1, E = 0\nN = 0, E = –1                       N = 0, E = 1\n The following table shows part of the trace of MOVE() according to the TURN and STEP \nvalues:  R10 ,  L5 ,  R8 ,  R2 ,  L3 ,  R0.\n The last move, with a STEP value of 0, indicates that there are no more moves and that the \nstack is empty.\n         (d)         Copy and complete the table by tracing the algorithm on the following page.   \nDo not write solutions on this page. \nMoveCoordinatesDirection facing\nTURN      STEP        X        Y        N        E\n0010\n01010001\n1510510\n08\n02\n13\n00\n(This question continues on the following page)\nM15/4/COMSC/HP1/ENG/TZ0/XX\n\n– 11 –\n(Question 13 continued)\n X, Y = 0                        // Initial coordinates \n\t        N\t=\t1,\tE\t=\t0\t \t    \t            //\tDirection\tfacing\tat\tfirst\tturn\n         output (X, Y, N, E)            // Outputs starting point to the table\n         MOVE(X,Y,N,E)                   // Procedure to move on \n              input (TURN, STEP) \n\t    \t\t        loop\twhile\tSTEP\t≠\t0\t       //\tNo\tmore\tmoves\twhen\tSTEP\t=\t0\n                    if TURN = 0           // Right move\n                         X = X + N*STEP\n                         Y = Y - E*STEP\n                         if N = 0\n                                   N     =     -E\n                                   E     =     0\n                              else     \n                                   E     =     N\n                                   N     =     0\n                              end     if\n                         end     if\n                    if TURN = 1           // Left move\n                         X = X - N*STEP\n                         Y = Y + E*STEP \n                              if     N     =     0\n                                   N     =     E\n                                   E     =     0\n                              else     \n                                   E     =     -N\n                                   N     =     0\n                              end     if\n                         end     if     \n                    output (X, Y, N, E)\n                    MOVE(X, Y, N, E)\n                    end     loop\n           end  MOVE\n                                     [6]\nM15/4/COMSC/HP1/ENG/TZ0/XX","root":"M154COMSCHP1ENGTZ0XX"}