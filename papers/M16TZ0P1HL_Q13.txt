

 A car park has two barriers.  One barrier is at the entrance, where tickets are issued, and 
one barrier is at the exit, where paid tickets are checked when cars leave.  A display at the 
entrance, showing the current availability of spaces in the car park, is updated as tickets are 
issued and checked.
 The actions of issuing, paying and checking a ticket operate on the collection of objects, 
TICKETS, that is organized as a linked list.  Each object holds the following information:
 Nr:	ticket	number	(a	progressive	unique	identifier)
 Date: date of issue
 
Arrival: time of issue (in 24-hour format)
 PaidOn: date of payment  
 
PaidAt: time of payment (in 24-hour format).
 (a) Describe how a linked list is a suitable data structure for the given scenario. [2]
 When a car arrives and the car park is not full, a ticket is issued, the entrance barrier is 
raised and the display is updated. 
 Payment of a ticket at a machine updates both the ticket and its object representation held in 
the linked list.  The car must exit the car park within 10 minutes.
 At the exit barrier the ticket is checked, and this makes the barrier rise and updates the display.
 (b) For the given scenario, identify: 
                  (i)         one example of two processes that could occur concurrently [1]
                  (ii)         one example of two processes that could not occur concurrently. [1]
 (c) State the condition that needs to be checked on the ticket when a car leaves the car park. [1]
 A car arrives at the entrance barrier while another car is at the exit barrier.
 (d) Explain the order in which the operations for raising the barriers and updating the 
display	should	be	performed,	to	ensure	a	correct	and	efficient	management	of	the	 
car park. [3]
 Upon payment, the 
PaidOn and PaidAt	fields	are	populated	in	the	corresponding	object,	
without removing it from the linked list.
     (e)     Outline     one	implication	of	this	choice	of	design	in	terms	of	efficiency.	[2]
(This question continues on the following page)
M16/4/COMSC/HP1/ENG/TZ0/XX

– 5 –
Turn over
(Question 13 continued)
 The car park rules enforce a short-stay policy.  Staying in the car park for up to 2 hours is 
allowed, and is subject to two possible fees.  Staying in the car park for durations longer than 
two hours is subject to three possible fines, in addition to the original fee, up to a maximum 
price for each day.  Tickets are paid in Euros (EUR).
	The	possible	fees	and	fines	are	stored	in	a	two-dimensional	(2D)	array,	
RULES.
Up to 30 
minutes
Up to 2  
hours
Maximum  
daily price
RULES
↓↓↓
[0][1][2]
Fees
→
[0]0.50 EUR
 3.00 EUR
-------
Fines
→
[1]5.00 EUR
 15.00 EUR
30.00 EUR
 For example:
�   staying in the car park for 40 minutes costs 3.00 EUR
�   staying in the car park for 3 hours costs 3.00 + 15.00 = 18.00 EUR
�   any stay in the car park that exceeds 4 hours costs 30.00 EUR
�   a stay that spans two consecutive days, regardless of duration, costs 60.00 EUR. 
 (f) Construct the steps of an algorithm that calculates the amount that a ticket is to be 
charged.                                                                                                                                  [5]
M16/4/COMSC/HP1/ENG/TZ0/XX

– 6 –